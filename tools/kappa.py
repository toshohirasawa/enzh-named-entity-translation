from sklearn.metrics import confusion_matrix
import numpy as np
# from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error


def kappa(labels_1, labels_2):
    conf_mat = confusion_matrix(labels_1, labels_2)
    print(conf_mat)

    pe_rows = np.sum(conf_mat, axis=0)
    pe_cols = np.sum(conf_mat, axis=1)
    sum_total = sum(pe_cols)
    pe = np.dot(pe_rows, pe_cols) / float(sum_total**2)
    po = np.trace(conf_mat) / float(sum_total)
    return (po - pe) / (1 - pe)


def find_difference(labels_1, labels_2, tar1, tar2):
    res = []
    for idx, (l1, l2) in enumerate(zip(labels_1, labels_2)):
        if l1 == tar1 and l2 == tar2:
            res.append((idx + 3))
    return res


if __name__ == '__main__':

    fluency_z = [3, 3, 3, 3, 3, 3, 4, 4, 4, 2, 2, 4, 2, 3, 2, 3, 4, 4, 4, 4, 2, 2, 4, 1, 5, 1, 1, 2, 3, 4, 2, 1, 4, 2, 3, 4, 3, 4, 4, 4, 3, 2, 3, 1, 4, 4, 4, 2, 2, 4, 4, 1, 3, 2, 2, 4, 4, 4, 3, 2, 3, 3, 2, 3, 3, 3, 4, 4, 3, 1, 1, 1, 1, 1, 2, 4, 4, 4, 3, 2, 2, 4, 3, 3, 4, 3, 1, 1, 3, 2, 4, 4, 3, 3, 5, 4, 3, 1, 1, 3, 1, 3, 4, 4, 3, 4, 2, 4, 1, 3, 4, 4, 2, 2, 4, 4, 3, 2, 3, 4, 1, 2, 2, 1, 4, 3, 1, 2, 2, 2, 4, 1, 2, 4, 4, 4, 4, 2, 4, 3, 1, 3, 3, 4, 3, 4, 3, 2, 3, 1, 1, 1, 3, 3, 2, 1, 1, 4, 4, 4, 3, 1, 3, 4, 1, 1, 3, 3, 3, 1, 4, 1, 3, 4, 4, 3, 4, 4, 4, 4, 4, 3, 4, 4, 2, 1, 2, 1, 2, 4, 4, 3, 1, 1, 3, 3, 1, 1, 1, 4, 3, 4, 3, 3, 4, 1, 1, 2, 3, 3, 1, 3, 1, 3, 2, 2, 1, 3, 1, 4, 4, 3, 4, 5, 4, 4, 4, 3, 2, 1, 5, 1, 4, 4, 2, 3, 3, 1, 3, 2, 4, 4, 1, 4, 1, 5, 4, 1, 1, 2, 1, 1, 3, 3, 4, 1, 1, 1, 2, 3, 3, 4, 3, 4, 1, 3, 3, 3, 1, 4, 3, 1, 2, 4, 1, 2, 5, 4, 3, 3, 4, 4, 4, 4, 4, 3, 1, 4, 3, 3, 5, 4, 1, 4, 4, 5, 3, 1, 3, 5, 1, 3, 1, 4, 4, 3, 4, 3, 4, 3, 4, 3, 4, 4, 2, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 3, 4, 5, 3, 1, 3, 4, 2, 4, 3, 4, 4, 4]
    fluency_w = [
        4, 3, 3, 3, 3, 3, 4, 4, 4, 2, 4, 4, 2, 3, 2, 3, 4, 4, 4, 4, 2, 2, 3, 1,
        5, 1, 1, 2, 3, 4, 2, 1, 4, 2, 3, 4, 4, 4, 2, 2, 3, 2, 3, 1, 3, 3, 4, 2,
        2, 2, 4, 1, 4, 2, 2, 4, 4, 4, 3, 2, 3, 4, 2, 3, 3, 3, 4, 4, 5, 1, 1, 1,
        1, 4, 2, 3, 4, 4, 3, 2, 2, 4, 3, 3, 4, 3, 1, 1, 3, 2, 4, 2, 3, 3, 5, 4,
        3, 1, 1, 3, 1, 3, 4, 4, 4, 4, 2, 4, 5, 3, 4, 4, 2, 2, 4, 4, 3, 2, 3, 4,
        4, 2, 2, 1, 4, 3, 4, 2, 2, 2, 4, 4, 3, 4, 4, 4, 4, 2, 4, 3, 2, 3, 3, 3,
        3, 4, 3, 1, 4, 2, 1, 1, 3, 3, 1, 1, 2, 4, 4, 4, 1, 2, 3, 4, 2, 3, 3, 1,
        3, 1, 4, 1, 3, 3, 4, 3, 4, 4, 1, 4, 3, 3, 4, 4, 2, 1, 1, 1, 2, 4, 3, 3,
        1, 1, 3, 3, 1, 3, 2, 3, 3, 3, 3, 3, 3, 4, 1, 2, 3, 3, 1, 3, 4, 3, 1, 1,
        1, 3, 2, 5, 4, 3, 4, 5, 4, 3, 3, 3, 2, 4, 5, 1, 4, 4, 1, 3, 3, 2, 2, 3,
        4, 4, 4, 4, 1, 5, 3, 4, 1, 2, 2, 1, 3, 3, 4, 1, 1, 1, 2, 3, 3, 4, 3, 4,
        1, 3, 3, 3, 1, 2, 3, 1, 2, 3, 3, 2, 4, 4, 3, 3, 4, 4, 4, 1, 4, 3, 4, 4,
        3, 2, 5, 4, 4, 3, 3, 5, 3, 1, 3, 5, 1, 2, 1, 3, 4, 3, 3, 3, 3, 3, 3, 3,
        4, 4, 2, 2, 3, 4, 3, 2, 2, 2, 3, 4, 3, 4, 3, 4, 3, 1, 3, 3, 2, 4, 3, 4,
        4, 4
    ]  # 安捷倫科技: 1, 加阳公司: 1, 博思艾伦汉密尔顿控股公司: 2, 伯克希尔·哈撒韦: 2

    pronun_z = [
        1, 1, 3, 5, 5, 1, 1, 3, 5, 3, 1, 1, 3, 5, 3, 5, 1, 1, 1, 1, 3, 3, 1, 5,
        1, 5, 3, 1, 1, 1, 3, 5, 5, 5, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 5, 3,
        5, 3, 1, 5, 5, 3, 3, 1, 3, 1, 3, 3, 5, 3, 3, 3, 3, 3, 5, 1, 3, 5, 3, 5,
        5, 5, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 3, 1, 5, 1, 3, 1, 3, 3, 1, 3, 3,
        5, 5, 3, 3, 5, 3, 3, 1, 3, 1, 3, 3, 5, 1, 5, 3, 3, 3, 1, 1, 1, 3, 5, 1,
        5, 3, 3, 3, 1, 3, 3, 3, 3, 3, 1, 5, 3, 1, 1, 1, 1, 3, 3, 3, 5, 3, 3, 1,
        5, 3, 1, 3, 1, 5, 5, 3, 3, 3, 3, 5, 5, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
        5, 5, 3, 3, 5, 1, 5, 5, 3, 1, 3, 1, 1, 3, 3, 3, 3, 5, 3, 3, 1, 3, 3, 5,
        5, 5, 3, 1, 5, 3, 5, 1, 3, 1, 1, 5, 1, 3, 5, 3, 1, 1, 3, 1, 5, 1, 3, 3,
        5, 3, 3, 5, 1, 3, 3, 3, 1, 5, 1, 3, 3, 3, 3, 5, 1, 1, 3, 5, 3, 3, 1, 5,
        3, 3, 3, 1, 3, 3, 1, 3, 3, 3, 3, 3, 3, 1, 1, 3, 5, 5, 3, 1, 3, 3, 3, 1,
        5, 5, 1, 1, 3, 3, 1, 5, 1, 1, 3, 3, 1, 1, 3, 3, 3, 1, 1, 3, 3, 5, 3, 1,
        5, 3, 1, 5, 3, 3, 3, 1, 5, 3, 3, 1, 5, 3, 1, 1, 1, 3, 3, 1, 3, 1, 1, 1,
        1, 1, 1, 3, 3, 3, 5, 3, 5, 3, 5, 3, 3, 1, 1, 3, 5, 3, 5, 3, 3, 1, 3, 1,
        3, 5
    ]
    pronun_w = [
        1, 1, 3, 5, 5, 1, 1, 3, 3, 3, 1, 1, 3, 3, 3, 5, 1, 1, 1, 1, 3, 3, 1, 5,
        1, 3, 3, 1, 1, 1, 3, 3, 5, 5, 1, 1, 3, 3, 1, 3, 1, 3, 3, 3, 3, 1, 5, 3,
        5, 3, 1, 3, 3, 3, 3, 1, 5, 1, 3, 3, 3, 3, 1, 1, 1, 1, 5, 1, 3, 3, 3, 5,
        3, 5, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 3, 3, 1, 5, 1,
        5, 3, 5, 3, 3, 1, 3, 1, 3, 1, 3, 3, 3, 3, 5, 3, 3, 3, 1, 3, 1, 3, 5, 1,
        5, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 5, 3, 1, 1, 1, 1, 3, 3, 3, 5, 3, 3, 3,
        3, 1, 1, 3, 1, 3, 3, 3, 1, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 5, 3, 3, 3, 1, 1, 3, 3, 1, 3, 1, 1, 3, 1, 3, 3, 3, 3, 3, 1, 3, 3, 3,
        3, 3, 3, 1, 3, 3, 3, 1, 3, 1, 1, 3, 1, 3, 3, 3, 1, 1, 3, 1, 5, 1, 3, 3,
        3, 3, 3, 3, 1, 1, 3, 1, 1, 3, 1, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 3,
        3, 3, 3, 1, 3, 3, 1, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 3, 3, 3, 1,
        5, 3, 1, 1, 3, 3, 1, 3, 1, 1, 3, 3, 1, 1, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1,
        3, 3, 1, 5, 3, 3, 1, 1, 5, 3, 5, 1, 3, 3, 3, 1, 1, 3, 3, 1, 3, 1, 1, 1,
        1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 1, 3, 1,
        1, 3
    ]

    meaning_z = [3, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 3, 3, 1, 3, 1, 5, 5, 5, 5, 3, 1, 1, 3, 5, 1, 1, 1, 3, 1, 3, 3, 3, 1, 3, 5, 3, 3, 3, 3, 3, 3, 5, 3, 3, 1, 1, 3, 5, 3, 5, 1, 1, 3, 3, 5, 1, 5, 5, 3, 1, 3, 3, 3, 3, 3, 1, 5, 5, 1, 1, 1, 1, 5, 5, 1, 5, 5, 1, 3, 3, 1, 5, 3, 1, 3, 3, 1, 3, 3, 5, 3, 5, 1, 3, 3, 5, 3, 5, 3, 5, 3, 5, 5, 3, 5, 3, 5, 3, 3, 5, 1, 3, 3, 5, 3, 1, 3, 5, 3, 5, 5, 3, 1, 5, 5, 5, 3, 1, 3, 1, 1, 1, 5, 5, 5, 5, 3, 1, 3, 5, 3, 3, 3, 1, 5, 5, 3, 3, 5, 5, 3, 3, 1, 3, 1, 1, 1, 3, 5, 3, 1, 3, 5, 1, 1, 3, 3, 5, 3, 1, 3, 1, 5, 3, 5, 5, 1, 3, 5, 5, 5, 1, 5, 3, 3, 3, 5, 3, 3, 5, 1, 1, 1, 3, 3, 3, 1, 5, 5, 5, 5, 3, 1, 5, 1, 1, 3, 5, 3, 1, 5, 1, 5, 1, 3, 3, 5, 3, 1, 5, 3, 3, 5, 5, 1, 3, 3, 3, 5, 3, 5, 5, 1, 3, 5, 1, 1, 5, 5, 1, 3, 1, 5, 3, 3, 5, 5, 1, 3, 3, 3, 3, 5, 1, 1, 5, 5, 3, 3, 3, 5, 3, 5, 1, 1, 3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 5, 5, 3, 5, 3, 3, 1, 3, 1, 5, 1, 5, 1, 3, 5, 3, 1, 5, 5, 5, 5, 5, 5, 5, 3, 3, 1, 5, 3, 5, 3, 5, 3, 5, 3, 5, 5, 5, 3, 5, 3, 3, 1, 3, 5, 3, 1, 1, 3, 5, 3, 1, 5, 3, 5, 3, 3, 1, 1, 1, 5, 1]
    meaning_w = [
        3, 1, 1, 1, 1, 5, 1, 1, 1, 3, 1, 3, 3, 1, 3, 1, 5, 5, 5, 5, 3, 1, 3, 3, 5, 1, 3, 3, 3, 1, 3, 3, 5, 5, 3, 5, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 1, 3, 5, 3, 5, 1, 3, 3, 3, 5, 1, 5, 5, 3, 1, 3, 3, 3, 3, 3, 1, 5, 5, 1, 1, 1, 1, 5, 5, 1, 5, 5, 1, 3, 3, 3, 3, 3, 1, 3, 1, 1, 3, 3, 1, 3, 5, 5, 1, 5, 5, 3, 5, 3, 5, 3, 3, 5, 3, 5, 3, 5, 1, 5, 5, 1, 3, 3, 5, 1, 3, 3, 5, 3, 5, 5, 3, 3, 5, 5, 5, 1, 1, 3, 3, 1, 3, 5, 5, 5, 5, 3, 1, 5, 5, 3, 3, 3, 1, 5, 3, 3, 5, 5, 5, 3, 3, 1, 3, 1, 1, 1, 3, 5, 3, 5, 5, 5, 5, 1, 3, 3, 5, 3, 1, 3, 1, 3, 5, 5, 1, 1, 3, 3, 5, 5, 3, 5, 3, 3, 3, 5, 3, 3, 5, 1, 5, 1, 5, 3, 3, 1, 5, 3, 5, 5, 3, 1, 5, 5, 3, 3, 3, 3, 1, 5, 5, 5, 3, 3, 3, 5, 1, 1, 3, 3, 3, 5, 5, 1, 3, 3, 3, 5, 5, 3, 5, 1, 3, 5, 3, 5, 3, 5, 1, 3, 1, 5, 3, 1, 3, 5, 1, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 3, 3, 5, 3, 5, 5, 3, 3, 3, 1, 3, 3, 3, 3, 3, 1, 3, 1, 5, 5, 3, 3, 3, 1, 3, 3, 1, 1, 5, 1, 3, 5, 5, 1, 5, 5, 5, 1, 5, 5, 5, 3, 3, 1, 5, 3, 5, 3, 3, 3, 3, 3, 3, 5, 5, 3, 3, 3, 1, 1, 3, 5, 3, 1, 3, 3, 5, 3, 1, 1, 3, 1, 3, 3, 1, 1, 3, 5, 1
    ]  # (Avery Dennison, 艾利丹尼森): 3, (Baker Hughes, 贝克休斯): 3, (BorgWarner, 博格华纳):3

    total_z = [
        a + max(b, c) for a, b, c in zip(fluency_z, pronun_z, meaning_z)
    ]
    total_w = [
        a + max(b, c) for a, b, c in zip(fluency_w, pronun_w, meaning_w)
    ]

    # print(find_difference(pronun_z, pronun_w, 5, 3))

    print(kappa(fluency_z, fluency_w))  # 0.6826
    print(kappa(pronun_z, pronun_w))  # 0.6205
    print(kappa(meaning_z, meaning_w))  # 0.6465

    print(kappa(total_z, total_w), '\n')

    print(mean_squared_error(fluency_z, fluency_w, squared=False))
    print(mean_squared_error(pronun_z, pronun_w, squared=False))
    print(mean_squared_error(meaning_z, meaning_w, squared=False))
    print(mean_squared_error(total_z, total_w, squared=False))

    # print('fluency_z:', fluency_z)
    # print('fluency_w:', fluency_w)

    # print('pro_z', pronun_z)
    # print('pro_w', pronun_w)

    # print('mean_z', meaning_z)
    # print('mean_w', meaning_w)